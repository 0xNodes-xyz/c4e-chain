// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfedistributor/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUpdateAllSubDistributors struct {
	// authority is the address of the governance account.
	Authority       string           `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	SubDistributors []SubDistributor `protobuf:"bytes,2,rep,name=sub_distributors,json=subDistributors,proto3" json:"sub_distributors"`
}

func (m *MsgUpdateAllSubDistributors) Reset()         { *m = MsgUpdateAllSubDistributors{} }
func (m *MsgUpdateAllSubDistributors) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAllSubDistributors) ProtoMessage()    {}
func (*MsgUpdateAllSubDistributors) Descriptor() ([]byte, []int) {
	return fileDescriptor_666a85c20069e03a, []int{0}
}
func (m *MsgUpdateAllSubDistributors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAllSubDistributors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAllSubDistributors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAllSubDistributors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAllSubDistributors.Merge(m, src)
}
func (m *MsgUpdateAllSubDistributors) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAllSubDistributors) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAllSubDistributors.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAllSubDistributors proto.InternalMessageInfo

func (m *MsgUpdateAllSubDistributors) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateAllSubDistributors) GetSubDistributors() []SubDistributor {
	if m != nil {
		return m.SubDistributors
	}
	return nil
}

type MsgUpdateAllSubDistributorsResponse struct {
}

func (m *MsgUpdateAllSubDistributorsResponse) Reset()         { *m = MsgUpdateAllSubDistributorsResponse{} }
func (m *MsgUpdateAllSubDistributorsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAllSubDistributorsResponse) ProtoMessage()    {}
func (*MsgUpdateAllSubDistributorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_666a85c20069e03a, []int{1}
}
func (m *MsgUpdateAllSubDistributorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAllSubDistributorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAllSubDistributorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAllSubDistributorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAllSubDistributorsResponse.Merge(m, src)
}
func (m *MsgUpdateAllSubDistributorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAllSubDistributorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAllSubDistributorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAllSubDistributorsResponse proto.InternalMessageInfo

type MsgUpdateSubDistributor struct {
	// authority is the address of the governance account.
	Authority      string          `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	SubDistributor *SubDistributor `protobuf:"bytes,2,opt,name=sub_distributor,json=subDistributor,proto3" json:"sub_distributor,omitempty"`
}

func (m *MsgUpdateSubDistributor) Reset()         { *m = MsgUpdateSubDistributor{} }
func (m *MsgUpdateSubDistributor) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSubDistributor) ProtoMessage()    {}
func (*MsgUpdateSubDistributor) Descriptor() ([]byte, []int) {
	return fileDescriptor_666a85c20069e03a, []int{2}
}
func (m *MsgUpdateSubDistributor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubDistributor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubDistributor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubDistributor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubDistributor.Merge(m, src)
}
func (m *MsgUpdateSubDistributor) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubDistributor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubDistributor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubDistributor proto.InternalMessageInfo

func (m *MsgUpdateSubDistributor) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateSubDistributor) GetSubDistributor() *SubDistributor {
	if m != nil {
		return m.SubDistributor
	}
	return nil
}

type MsgUpdateSubDistributorResponse struct {
}

func (m *MsgUpdateSubDistributorResponse) Reset()         { *m = MsgUpdateSubDistributorResponse{} }
func (m *MsgUpdateSubDistributorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSubDistributorResponse) ProtoMessage()    {}
func (*MsgUpdateSubDistributorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_666a85c20069e03a, []int{3}
}
func (m *MsgUpdateSubDistributorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubDistributorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubDistributorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubDistributorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubDistributorResponse.Merge(m, src)
}
func (m *MsgUpdateSubDistributorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubDistributorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubDistributorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubDistributorResponse proto.InternalMessageInfo

type MsgUpdateSubDistributorDestinationShare struct {
	Authority          string                                 `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	SubDistributorName string                                 `protobuf:"bytes,2,opt,name=sub_distributor_name,json=subDistributorName,proto3" json:"sub_distributor_name,omitempty"`
	DestinationName    string                                 `protobuf:"bytes,3,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	Share              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=share,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"share" yaml:"share"`
}

func (m *MsgUpdateSubDistributorDestinationShare) Reset() {
	*m = MsgUpdateSubDistributorDestinationShare{}
}
func (m *MsgUpdateSubDistributorDestinationShare) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSubDistributorDestinationShare) ProtoMessage()    {}
func (*MsgUpdateSubDistributorDestinationShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_666a85c20069e03a, []int{4}
}
func (m *MsgUpdateSubDistributorDestinationShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubDistributorDestinationShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubDistributorDestinationShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubDistributorDestinationShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubDistributorDestinationShare.Merge(m, src)
}
func (m *MsgUpdateSubDistributorDestinationShare) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubDistributorDestinationShare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubDistributorDestinationShare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubDistributorDestinationShare proto.InternalMessageInfo

func (m *MsgUpdateSubDistributorDestinationShare) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateSubDistributorDestinationShare) GetSubDistributorName() string {
	if m != nil {
		return m.SubDistributorName
	}
	return ""
}

func (m *MsgUpdateSubDistributorDestinationShare) GetDestinationName() string {
	if m != nil {
		return m.DestinationName
	}
	return ""
}

type MsgUpdateSubDistributorDestinationShareResponse struct {
}

func (m *MsgUpdateSubDistributorDestinationShareResponse) Reset() {
	*m = MsgUpdateSubDistributorDestinationShareResponse{}
}
func (m *MsgUpdateSubDistributorDestinationShareResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateSubDistributorDestinationShareResponse) ProtoMessage() {}
func (*MsgUpdateSubDistributorDestinationShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_666a85c20069e03a, []int{5}
}
func (m *MsgUpdateSubDistributorDestinationShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubDistributorDestinationShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubDistributorDestinationShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubDistributorDestinationShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubDistributorDestinationShareResponse.Merge(m, src)
}
func (m *MsgUpdateSubDistributorDestinationShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubDistributorDestinationShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubDistributorDestinationShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubDistributorDestinationShareResponse proto.InternalMessageInfo

type MsgUpdateSubDistributorBurnShare struct {
	Authority          string                                 `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	SubDistributorName string                                 `protobuf:"bytes,2,opt,name=sub_distributor_name,json=subDistributorName,proto3" json:"sub_distributor_name,omitempty"`
	BurnShare          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=burn_share,json=burnShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_share" yaml:"burn_share"`
}

func (m *MsgUpdateSubDistributorBurnShare) Reset()         { *m = MsgUpdateSubDistributorBurnShare{} }
func (m *MsgUpdateSubDistributorBurnShare) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSubDistributorBurnShare) ProtoMessage()    {}
func (*MsgUpdateSubDistributorBurnShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_666a85c20069e03a, []int{6}
}
func (m *MsgUpdateSubDistributorBurnShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubDistributorBurnShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubDistributorBurnShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubDistributorBurnShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubDistributorBurnShare.Merge(m, src)
}
func (m *MsgUpdateSubDistributorBurnShare) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubDistributorBurnShare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubDistributorBurnShare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubDistributorBurnShare proto.InternalMessageInfo

func (m *MsgUpdateSubDistributorBurnShare) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateSubDistributorBurnShare) GetSubDistributorName() string {
	if m != nil {
		return m.SubDistributorName
	}
	return ""
}

type MsgUpdateSubDistributorBurnShareResponse struct {
}

func (m *MsgUpdateSubDistributorBurnShareResponse) Reset() {
	*m = MsgUpdateSubDistributorBurnShareResponse{}
}
func (m *MsgUpdateSubDistributorBurnShareResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSubDistributorBurnShareResponse) ProtoMessage()    {}
func (*MsgUpdateSubDistributorBurnShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_666a85c20069e03a, []int{7}
}
func (m *MsgUpdateSubDistributorBurnShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubDistributorBurnShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubDistributorBurnShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubDistributorBurnShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubDistributorBurnShareResponse.Merge(m, src)
}
func (m *MsgUpdateSubDistributorBurnShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubDistributorBurnShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubDistributorBurnShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubDistributorBurnShareResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateAllSubDistributors)(nil), "chain4energy.c4echain.cfedistributor.MsgUpdateAllSubDistributors")
	proto.RegisterType((*MsgUpdateAllSubDistributorsResponse)(nil), "chain4energy.c4echain.cfedistributor.MsgUpdateAllSubDistributorsResponse")
	proto.RegisterType((*MsgUpdateSubDistributor)(nil), "chain4energy.c4echain.cfedistributor.MsgUpdateSubDistributor")
	proto.RegisterType((*MsgUpdateSubDistributorResponse)(nil), "chain4energy.c4echain.cfedistributor.MsgUpdateSubDistributorResponse")
	proto.RegisterType((*MsgUpdateSubDistributorDestinationShare)(nil), "chain4energy.c4echain.cfedistributor.MsgUpdateSubDistributorDestinationShare")
	proto.RegisterType((*MsgUpdateSubDistributorDestinationShareResponse)(nil), "chain4energy.c4echain.cfedistributor.MsgUpdateSubDistributorDestinationShareResponse")
	proto.RegisterType((*MsgUpdateSubDistributorBurnShare)(nil), "chain4energy.c4echain.cfedistributor.MsgUpdateSubDistributorBurnShare")
	proto.RegisterType((*MsgUpdateSubDistributorBurnShareResponse)(nil), "chain4energy.c4echain.cfedistributor.MsgUpdateSubDistributorBurnShareResponse")
}

func init() { proto.RegisterFile("c4echain/cfedistributor/tx.proto", fileDescriptor_666a85c20069e03a) }

var fileDescriptor_666a85c20069e03a = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0x35, 0x2d, 0x52, 0x1e, 0x88, 0x14, 0x2b, 0x52, 0x83, 0x41, 0x4e, 0x30, 0xa5, 0x04,
	0xa4, 0xd8, 0xb4, 0x64, 0x40, 0x48, 0x20, 0x35, 0x04, 0x24, 0x86, 0x74, 0x70, 0xe9, 0x82, 0x84,
	0x22, 0xdb, 0x39, 0x1c, 0x8b, 0xd8, 0x17, 0xf9, 0xce, 0xa8, 0xf9, 0x17, 0x4c, 0x4c, 0x4c, 0x4c,
	0xfc, 0x0c, 0xc6, 0x0e, 0x0c, 0x9d, 0x10, 0x62, 0x88, 0x20, 0xf9, 0x07, 0x8c, 0x4c, 0xc8, 0xbe,
	0xd8, 0x89, 0x03, 0x6e, 0x52, 0xd2, 0x4e, 0xbe, 0xbb, 0xf7, 0xbd, 0xef, 0x7d, 0xdf, 0xf3, 0x3d,
	0x1d, 0x94, 0xcd, 0x1a, 0x36, 0x3b, 0xba, 0xed, 0xaa, 0xe6, 0x6b, 0xdc, 0xb6, 0x29, 0xf3, 0x6c,
	0xc3, 0x67, 0xc4, 0x53, 0xd9, 0xa1, 0xd2, 0xf3, 0x08, 0x23, 0xc2, 0x66, 0x18, 0xae, 0x61, 0x17,
	0x7b, 0x56, 0x5f, 0x89, 0xe0, 0x4a, 0x12, 0x2e, 0x6e, 0x98, 0x84, 0x3a, 0x84, 0xaa, 0x0e, 0xb5,
	0xd4, 0xb7, 0xdb, 0xc1, 0x87, 0xa7, 0x8b, 0x05, 0x8b, 0x58, 0x24, 0x5c, 0xaa, 0xc1, 0x6a, 0x7c,
	0x7a, 0x95, 0xc3, 0x5b, 0x3c, 0xc0, 0x37, 0xe3, 0x50, 0x35, 0x4d, 0x11, 0xf5, 0x8d, 0xd6, 0xd4,
	0x9e, 0xc3, 0xe5, 0x8f, 0x08, 0xae, 0x35, 0xa9, 0x75, 0xd0, 0x6b, 0xeb, 0x0c, 0xef, 0x76, 0xbb,
	0xfb, 0xbe, 0xd1, 0x98, 0x80, 0xa8, 0x70, 0x1d, 0x72, 0xba, 0xcf, 0x3a, 0xc4, 0xb3, 0x59, 0xbf,
	0x88, 0xca, 0xa8, 0x92, 0xd3, 0x26, 0x07, 0x02, 0x86, 0xf5, 0x19, 0x5a, 0x5a, 0x5c, 0x29, 0x67,
	0x2b, 0x17, 0x77, 0x6a, 0xca, 0x22, 0xbe, 0x95, 0x64, 0xb9, 0xfa, 0xea, 0xd1, 0xa0, 0x94, 0xd1,
	0xf2, 0x34, 0x29, 0x42, 0xbe, 0x05, 0x37, 0x4f, 0xd0, 0xa8, 0x61, 0xda, 0x23, 0x2e, 0xc5, 0xf2,
	0x7b, 0x04, 0x1b, 0x31, 0x2e, 0x09, 0x9a, 0xe3, 0xe3, 0x15, 0xe4, 0x67, 0x7c, 0x14, 0x57, 0xca,
	0xe8, 0x7f, 0x6d, 0x68, 0x97, 0x93, 0x06, 0xe4, 0x1b, 0x50, 0x4a, 0xd1, 0x15, 0x6b, 0xff, 0x8d,
	0xe0, 0x76, 0x0a, 0xa6, 0x81, 0x29, 0xb3, 0x5d, 0x9d, 0xd9, 0xc4, 0xdd, 0xef, 0xe8, 0x1e, 0x9e,
	0xe3, 0xe5, 0x1e, 0x14, 0x66, 0xbc, 0xb4, 0x5c, 0xdd, 0xc1, 0xa1, 0xa1, 0x9c, 0x26, 0x24, 0xa5,
	0xed, 0xe9, 0x0e, 0x16, 0xee, 0xc0, 0x7a, 0x7b, 0x52, 0x83, 0xa3, 0xb3, 0x21, 0x3a, 0x3f, 0x75,
	0x1e, 0x42, 0x5f, 0xc0, 0x1a, 0x0d, 0x34, 0x14, 0x57, 0x83, 0x78, 0xfd, 0x71, 0xf0, 0xbf, 0xbe,
	0x0f, 0x4a, 0x5b, 0x96, 0xcd, 0x3a, 0xbe, 0xa1, 0x98, 0xc4, 0x19, 0xdf, 0xc6, 0xf1, 0xa7, 0x4a,
	0xdb, 0x6f, 0x54, 0xd6, 0xef, 0x61, 0xaa, 0x34, 0xb0, 0xf9, 0x6b, 0x50, 0xba, 0xd4, 0xd7, 0x9d,
	0xee, 0x43, 0x39, 0x24, 0x91, 0x35, 0x4e, 0x26, 0x6f, 0x83, 0xba, 0xa0, 0xf7, 0xb8, 0x5f, 0x5f,
	0x11, 0x94, 0x53, 0x72, 0xea, 0xbe, 0x77, 0x4e, 0x8d, 0x32, 0x00, 0x0c, 0xdf, 0x73, 0x5b, 0xbc,
	0x05, 0x61, 0x8b, 0xea, 0x4f, 0x4e, 0xdd, 0x82, 0x2b, 0xbc, 0x05, 0x13, 0x26, 0x59, 0xcb, 0x19,
	0x91, 0x66, 0xf9, 0x2e, 0x54, 0xe6, 0xf9, 0x8a, 0x9a, 0xb0, 0xf3, 0x73, 0x0d, 0xb2, 0x4d, 0x6a,
	0x09, 0x9f, 0x10, 0x14, 0x53, 0x27, 0x78, 0x77, 0xb1, 0x2b, 0x7c, 0xc2, 0x80, 0x89, 0xcf, 0x97,
	0xa6, 0x88, 0x24, 0x0b, 0x1f, 0x10, 0x14, 0xfe, 0x39, 0xa0, 0x8f, 0x4e, 0x59, 0x23, 0x99, 0x2e,
	0x3e, 0x5d, 0x2a, 0x3d, 0x96, 0xf7, 0x05, 0xc1, 0xe6, 0x42, 0x33, 0xd8, 0x5c, 0xaa, 0xde, 0x2c,
	0x9d, 0x78, 0x70, 0xa6, 0x74, 0xb1, 0x9d, 0xcf, 0x08, 0xb6, 0x78, 0xc2, 0xdc, 0x59, 0x79, 0xb6,
	0x94, 0x82, 0x98, 0x47, 0xdc, 0x3b, 0x1b, 0x9e, 0xc8, 0x42, 0x5d, 0x3b, 0x1a, 0x4a, 0xe8, 0x78,
	0x28, 0xa1, 0x1f, 0x43, 0x09, 0xbd, 0x1b, 0x49, 0x99, 0xe3, 0x91, 0x94, 0xf9, 0x36, 0x92, 0x32,
	0x2f, 0x1f, 0x4c, 0x4f, 0xdc, 0x54, 0x4d, 0xd5, 0xac, 0xe1, 0x2a, 0x7f, 0x02, 0x0f, 0xff, 0x7a,
	0x96, 0x83, 0x39, 0x34, 0x2e, 0x84, 0x6f, 0xdf, 0xfd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe9,
	0x2f, 0xba, 0x67, 0xbe, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	UpdateAllSubDistributors(ctx context.Context, in *MsgUpdateAllSubDistributors, opts ...grpc.CallOption) (*MsgUpdateAllSubDistributorsResponse, error)
	UpdateSubDistributor(ctx context.Context, in *MsgUpdateSubDistributor, opts ...grpc.CallOption) (*MsgUpdateSubDistributorResponse, error)
	UpdateSubDistributorDestinationShare(ctx context.Context, in *MsgUpdateSubDistributorDestinationShare, opts ...grpc.CallOption) (*MsgUpdateSubDistributorDestinationShareResponse, error)
	UpdateMsgUpdateSubDistributorBurnShare(ctx context.Context, in *MsgUpdateSubDistributorBurnShare, opts ...grpc.CallOption) (*MsgUpdateSubDistributorBurnShareResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateAllSubDistributors(ctx context.Context, in *MsgUpdateAllSubDistributors, opts ...grpc.CallOption) (*MsgUpdateAllSubDistributorsResponse, error) {
	out := new(MsgUpdateAllSubDistributorsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfedistributor.Msg/UpdateAllSubDistributors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSubDistributor(ctx context.Context, in *MsgUpdateSubDistributor, opts ...grpc.CallOption) (*MsgUpdateSubDistributorResponse, error) {
	out := new(MsgUpdateSubDistributorResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSubDistributorDestinationShare(ctx context.Context, in *MsgUpdateSubDistributorDestinationShare, opts ...grpc.CallOption) (*MsgUpdateSubDistributorDestinationShareResponse, error) {
	out := new(MsgUpdateSubDistributorDestinationShareResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributorDestinationShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMsgUpdateSubDistributorBurnShare(ctx context.Context, in *MsgUpdateSubDistributorBurnShare, opts ...grpc.CallOption) (*MsgUpdateSubDistributorBurnShareResponse, error) {
	out := new(MsgUpdateSubDistributorBurnShareResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfedistributor.Msg/UpdateMsgUpdateSubDistributorBurnShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	UpdateAllSubDistributors(context.Context, *MsgUpdateAllSubDistributors) (*MsgUpdateAllSubDistributorsResponse, error)
	UpdateSubDistributor(context.Context, *MsgUpdateSubDistributor) (*MsgUpdateSubDistributorResponse, error)
	UpdateSubDistributorDestinationShare(context.Context, *MsgUpdateSubDistributorDestinationShare) (*MsgUpdateSubDistributorDestinationShareResponse, error)
	UpdateMsgUpdateSubDistributorBurnShare(context.Context, *MsgUpdateSubDistributorBurnShare) (*MsgUpdateSubDistributorBurnShareResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateAllSubDistributors(ctx context.Context, req *MsgUpdateAllSubDistributors) (*MsgUpdateAllSubDistributorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllSubDistributors not implemented")
}
func (*UnimplementedMsgServer) UpdateSubDistributor(ctx context.Context, req *MsgUpdateSubDistributor) (*MsgUpdateSubDistributorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubDistributor not implemented")
}
func (*UnimplementedMsgServer) UpdateSubDistributorDestinationShare(ctx context.Context, req *MsgUpdateSubDistributorDestinationShare) (*MsgUpdateSubDistributorDestinationShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubDistributorDestinationShare not implemented")
}
func (*UnimplementedMsgServer) UpdateMsgUpdateSubDistributorBurnShare(ctx context.Context, req *MsgUpdateSubDistributorBurnShare) (*MsgUpdateSubDistributorBurnShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMsgUpdateSubDistributorBurnShare not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateAllSubDistributors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAllSubDistributors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAllSubDistributors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfedistributor.Msg/UpdateAllSubDistributors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAllSubDistributors(ctx, req.(*MsgUpdateAllSubDistributors))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSubDistributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSubDistributor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSubDistributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSubDistributor(ctx, req.(*MsgUpdateSubDistributor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSubDistributorDestinationShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSubDistributorDestinationShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSubDistributorDestinationShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributorDestinationShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSubDistributorDestinationShare(ctx, req.(*MsgUpdateSubDistributorDestinationShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMsgUpdateSubDistributorBurnShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSubDistributorBurnShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMsgUpdateSubDistributorBurnShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfedistributor.Msg/UpdateMsgUpdateSubDistributorBurnShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMsgUpdateSubDistributorBurnShare(ctx, req.(*MsgUpdateSubDistributorBurnShare))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfedistributor.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAllSubDistributors",
			Handler:    _Msg_UpdateAllSubDistributors_Handler,
		},
		{
			MethodName: "UpdateSubDistributor",
			Handler:    _Msg_UpdateSubDistributor_Handler,
		},
		{
			MethodName: "UpdateSubDistributorDestinationShare",
			Handler:    _Msg_UpdateSubDistributorDestinationShare_Handler,
		},
		{
			MethodName: "UpdateMsgUpdateSubDistributorBurnShare",
			Handler:    _Msg_UpdateMsgUpdateSubDistributorBurnShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c4echain/cfedistributor/tx.proto",
}

func (m *MsgUpdateAllSubDistributors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAllSubDistributors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAllSubDistributors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubDistributors) > 0 {
		for iNdEx := len(m.SubDistributors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubDistributors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAllSubDistributorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAllSubDistributorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAllSubDistributorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubDistributor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubDistributor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubDistributor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubDistributor != nil {
		{
			size, err := m.SubDistributor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubDistributorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubDistributorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubDistributorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubDistributorDestinationShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubDistributorDestinationShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubDistributorDestinationShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Share.Size()
		i -= size
		if _, err := m.Share.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.DestinationName) > 0 {
		i -= len(m.DestinationName)
		copy(dAtA[i:], m.DestinationName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubDistributorName) > 0 {
		i -= len(m.SubDistributorName)
		copy(dAtA[i:], m.SubDistributorName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubDistributorName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubDistributorDestinationShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubDistributorDestinationShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubDistributorDestinationShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubDistributorBurnShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubDistributorBurnShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubDistributorBurnShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BurnShare.Size()
		i -= size
		if _, err := m.BurnShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SubDistributorName) > 0 {
		i -= len(m.SubDistributorName)
		copy(dAtA[i:], m.SubDistributorName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubDistributorName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubDistributorBurnShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubDistributorBurnShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubDistributorBurnShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateAllSubDistributors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SubDistributors) > 0 {
		for _, e := range m.SubDistributors {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateAllSubDistributorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSubDistributor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SubDistributor != nil {
		l = m.SubDistributor.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSubDistributorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSubDistributorDestinationShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubDistributorName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestinationName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Share.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateSubDistributorDestinationShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSubDistributorBurnShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubDistributorName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.BurnShare.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateSubDistributorBurnShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateAllSubDistributors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAllSubDistributors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAllSubDistributors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubDistributors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubDistributors = append(m.SubDistributors, SubDistributor{})
			if err := m.SubDistributors[len(m.SubDistributors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAllSubDistributorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAllSubDistributorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAllSubDistributorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubDistributor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubDistributor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubDistributor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubDistributor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubDistributor == nil {
				m.SubDistributor = &SubDistributor{}
			}
			if err := m.SubDistributor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubDistributorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubDistributorDestinationShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorDestinationShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorDestinationShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubDistributorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubDistributorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubDistributorDestinationShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorDestinationShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorDestinationShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubDistributorBurnShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorBurnShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorBurnShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubDistributorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubDistributorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubDistributorBurnShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorBurnShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubDistributorBurnShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
