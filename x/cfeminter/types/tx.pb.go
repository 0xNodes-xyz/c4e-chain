// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: c4echain/cfeminter/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUpdateMinters struct {
	Authority string    `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Minters   []*Minter `protobuf:"bytes,2,rep,name=minters,proto3" json:"minters,omitempty"`
}

func (m *MsgUpdateMinters) Reset()         { *m = MsgUpdateMinters{} }
func (m *MsgUpdateMinters) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMinters) ProtoMessage()    {}
func (*MsgUpdateMinters) Descriptor() ([]byte, []int) {
	return fileDescriptor_53ba5c5f3d126042, []int{0}
}
func (m *MsgUpdateMinters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMinters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMinters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMinters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMinters.Merge(m, src)
}
func (m *MsgUpdateMinters) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMinters) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMinters.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMinters proto.InternalMessageInfo

func (m *MsgUpdateMinters) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateMinters) GetMinters() []*Minter {
	if m != nil {
		return m.Minters
	}
	return nil
}

type MsgUpdateMintersResponse struct {
}

func (m *MsgUpdateMintersResponse) Reset()         { *m = MsgUpdateMintersResponse{} }
func (m *MsgUpdateMintersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMintersResponse) ProtoMessage()    {}
func (*MsgUpdateMintersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_53ba5c5f3d126042, []int{1}
}
func (m *MsgUpdateMintersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMintersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMintersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMintersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMintersResponse.Merge(m, src)
}
func (m *MsgUpdateMintersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMintersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMintersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMintersResponse proto.InternalMessageInfo

type MsgUpdateMintDenom struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	MintDenom string `protobuf:"bytes,2,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
}

func (m *MsgUpdateMintDenom) Reset()         { *m = MsgUpdateMintDenom{} }
func (m *MsgUpdateMintDenom) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMintDenom) ProtoMessage()    {}
func (*MsgUpdateMintDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_53ba5c5f3d126042, []int{2}
}
func (m *MsgUpdateMintDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMintDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMintDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMintDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMintDenom.Merge(m, src)
}
func (m *MsgUpdateMintDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMintDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMintDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMintDenom proto.InternalMessageInfo

func (m *MsgUpdateMintDenom) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateMintDenom) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

type MsgUpdateMintDenomResponse struct {
}

func (m *MsgUpdateMintDenomResponse) Reset()         { *m = MsgUpdateMintDenomResponse{} }
func (m *MsgUpdateMintDenomResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMintDenomResponse) ProtoMessage()    {}
func (*MsgUpdateMintDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_53ba5c5f3d126042, []int{3}
}
func (m *MsgUpdateMintDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMintDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMintDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMintDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMintDenomResponse.Merge(m, src)
}
func (m *MsgUpdateMintDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMintDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMintDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMintDenomResponse proto.InternalMessageInfo

type MsgUpdateStartTime struct {
	Authority string    `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	StartTime time.Time `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
}

func (m *MsgUpdateStartTime) Reset()         { *m = MsgUpdateStartTime{} }
func (m *MsgUpdateStartTime) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStartTime) ProtoMessage()    {}
func (*MsgUpdateStartTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_53ba5c5f3d126042, []int{4}
}
func (m *MsgUpdateStartTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStartTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStartTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStartTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStartTime.Merge(m, src)
}
func (m *MsgUpdateStartTime) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStartTime) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStartTime.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStartTime proto.InternalMessageInfo

func (m *MsgUpdateStartTime) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateStartTime) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

type MsgUpdateStartTimeResponse struct {
}

func (m *MsgUpdateStartTimeResponse) Reset()         { *m = MsgUpdateStartTimeResponse{} }
func (m *MsgUpdateStartTimeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStartTimeResponse) ProtoMessage()    {}
func (*MsgUpdateStartTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_53ba5c5f3d126042, []int{5}
}
func (m *MsgUpdateStartTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStartTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStartTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStartTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStartTimeResponse.Merge(m, src)
}
func (m *MsgUpdateStartTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStartTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStartTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStartTimeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateMinters)(nil), "chain4energy.c4echain.cfeminter.MsgUpdateMinters")
	proto.RegisterType((*MsgUpdateMintersResponse)(nil), "chain4energy.c4echain.cfeminter.MsgUpdateMintersResponse")
	proto.RegisterType((*MsgUpdateMintDenom)(nil), "chain4energy.c4echain.cfeminter.MsgUpdateMintDenom")
	proto.RegisterType((*MsgUpdateMintDenomResponse)(nil), "chain4energy.c4echain.cfeminter.MsgUpdateMintDenomResponse")
	proto.RegisterType((*MsgUpdateStartTime)(nil), "chain4energy.c4echain.cfeminter.MsgUpdateStartTime")
	proto.RegisterType((*MsgUpdateStartTimeResponse)(nil), "chain4energy.c4echain.cfeminter.MsgUpdateStartTimeResponse")
}

func init() { proto.RegisterFile("c4echain/cfeminter/tx.proto", fileDescriptor_53ba5c5f3d126042) }

var fileDescriptor_53ba5c5f3d126042 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbb, 0xce, 0xd3, 0x30,
	0x18, 0x4d, 0x5a, 0x09, 0xa8, 0x2b, 0x04, 0x8a, 0x90, 0x08, 0xa1, 0x24, 0x55, 0x16, 0xba, 0x60,
	0xab, 0x97, 0x05, 0x31, 0x51, 0x58, 0x33, 0x10, 0xca, 0xc2, 0x52, 0xa5, 0xa9, 0xeb, 0x46, 0xc2,
	0x71, 0x14, 0xbb, 0xd0, 0x0e, 0x4c, 0xbc, 0x40, 0x1f, 0xab, 0x63, 0x47, 0x26, 0x40, 0xed, 0x8b,
	0xa0, 0xc4, 0x75, 0x7a, 0xd5, 0x1f, 0xe5, 0x9f, 0x7c, 0xf9, 0xce, 0xf9, 0xce, 0xd1, 0xf9, 0x12,
	0x83, 0x97, 0xe1, 0x00, 0x87, 0xf3, 0x20, 0x8a, 0x51, 0x38, 0xc3, 0x34, 0x8a, 0x05, 0x4e, 0x91,
	0x58, 0xc2, 0x24, 0x65, 0x82, 0x19, 0x4e, 0x5e, 0x19, 0xe0, 0x18, 0xa7, 0x64, 0x05, 0x15, 0x12,
	0x16, 0x48, 0xeb, 0x79, 0xc8, 0x38, 0x65, 0x1c, 0x51, 0x4e, 0xd0, 0xf7, 0x6e, 0xb6, 0x48, 0xa6,
	0xf5, 0x8c, 0x30, 0xc2, 0xf2, 0x2d, 0xca, 0x76, 0x87, 0xdb, 0x17, 0x12, 0x3e, 0x96, 0x05, 0x79,
	0x38, 0x94, 0x9c, 0x1b, 0x3e, 0x92, 0x20, 0x0d, 0xe8, 0x5d, 0x00, 0xb9, 0x28, 0x00, 0x61, 0x8c,
	0x7c, 0xc3, 0x28, 0x3f, 0x4d, 0x16, 0x33, 0x24, 0x22, 0x8a, 0xb9, 0x08, 0x68, 0x22, 0x01, 0x2e,
	0x07, 0x4f, 0x3d, 0x4e, 0xbe, 0x24, 0xd3, 0x40, 0x60, 0x2f, 0x67, 0x72, 0xa3, 0x05, 0x1a, 0xc1,
	0x42, 0xcc, 0x59, 0x1a, 0x89, 0x95, 0xa9, 0xb7, 0xf5, 0x4e, 0xc3, 0x3f, 0x5e, 0x18, 0xef, 0xc1,
	0x43, 0x29, 0xc1, 0xcd, 0x5a, 0xbb, 0xde, 0x69, 0xf6, 0x5e, 0xc3, 0x92, 0x44, 0xa0, 0x6c, 0xec,
	0x2b, 0x9e, 0x6b, 0x01, 0xf3, 0x52, 0xd4, 0xc7, 0x3c, 0x61, 0x31, 0xc7, 0xee, 0x27, 0x60, 0x9c,
	0xd5, 0x3e, 0xe2, 0x98, 0xd1, 0x12, 0x4b, 0xaf, 0x00, 0xc8, 0x5a, 0x8f, 0xa7, 0x19, 0xd6, 0xac,
	0xc9, 0x32, 0x55, 0x64, 0xb7, 0x05, 0xac, 0xeb, 0x96, 0x85, 0xe0, 0x8f, 0x13, 0xc1, 0xcf, 0x22,
	0x48, 0xc5, 0x28, 0xa2, 0xb8, 0x44, 0xf0, 0x03, 0x00, 0x3c, 0x83, 0x8e, 0xb3, 0x38, 0x73, 0xc1,
	0x66, 0xcf, 0x82, 0x32, 0x6b, 0xa8, 0xb2, 0x86, 0x23, 0x95, 0xf5, 0xf0, 0xd1, 0xe6, 0x8f, 0xa3,
	0xad, 0xff, 0x3a, 0xba, 0xdf, 0xe0, 0x4a, 0xe2, 0xcc, 0x56, 0x21, 0xac, 0x6c, 0xf5, 0xd6, 0x75,
	0x50, 0xf7, 0x38, 0x31, 0x7e, 0x82, 0xc7, 0xe7, 0xd3, 0xe9, 0x96, 0xc7, 0x7d, 0x91, 0xad, 0xf5,
	0xb6, 0x32, 0x45, 0xd9, 0x30, 0x7e, 0xe9, 0xe0, 0xc9, 0xe5, 0x30, 0xfa, 0xd5, 0xda, 0xe5, 0x24,
	0xeb, 0xdd, 0x3d, 0x48, 0x37, 0x5c, 0x1c, 0x27, 0x54, 0xc1, 0x45, 0x41, 0xaa, 0xe2, 0xe2, 0x6a,
	0x24, 0x43, 0x6f, 0xb3, 0xb3, 0xf5, 0xed, 0xce, 0xd6, 0xff, 0xed, 0x6c, 0x7d, 0xbd, 0xb7, 0xb5,
	0xed, 0xde, 0xd6, 0x7e, 0xef, 0x6d, 0xed, 0x6b, 0x9f, 0x44, 0x62, 0xbe, 0x98, 0xc0, 0x90, 0x51,
	0x74, 0x2a, 0x80, 0xc2, 0x01, 0x7e, 0x23, 0x7f, 0xd0, 0xe5, 0xe9, 0x5b, 0xb2, 0x4a, 0x30, 0x9f,
	0x3c, 0xc8, 0x3f, 0x94, 0xfe, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xe5, 0x6c, 0x23, 0x6e,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	UpdateMinters(ctx context.Context, in *MsgUpdateMinters, opts ...grpc.CallOption) (*MsgUpdateMintersResponse, error)
	UpdateMintDenom(ctx context.Context, in *MsgUpdateMintDenom, opts ...grpc.CallOption) (*MsgUpdateMintDenomResponse, error)
	UpdateStartTime(ctx context.Context, in *MsgUpdateStartTime, opts ...grpc.CallOption) (*MsgUpdateStartTimeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateMinters(ctx context.Context, in *MsgUpdateMinters, opts ...grpc.CallOption) (*MsgUpdateMintersResponse, error) {
	out := new(MsgUpdateMintersResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeminter.Msg/UpdateMinters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMintDenom(ctx context.Context, in *MsgUpdateMintDenom, opts ...grpc.CallOption) (*MsgUpdateMintDenomResponse, error) {
	out := new(MsgUpdateMintDenomResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeminter.Msg/UpdateMintDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStartTime(ctx context.Context, in *MsgUpdateStartTime, opts ...grpc.CallOption) (*MsgUpdateStartTimeResponse, error) {
	out := new(MsgUpdateStartTimeResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeminter.Msg/UpdateStartTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	UpdateMinters(context.Context, *MsgUpdateMinters) (*MsgUpdateMintersResponse, error)
	UpdateMintDenom(context.Context, *MsgUpdateMintDenom) (*MsgUpdateMintDenomResponse, error)
	UpdateStartTime(context.Context, *MsgUpdateStartTime) (*MsgUpdateStartTimeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateMinters(ctx context.Context, req *MsgUpdateMinters) (*MsgUpdateMintersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMinters not implemented")
}
func (*UnimplementedMsgServer) UpdateMintDenom(ctx context.Context, req *MsgUpdateMintDenom) (*MsgUpdateMintDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMintDenom not implemented")
}
func (*UnimplementedMsgServer) UpdateStartTime(ctx context.Context, req *MsgUpdateStartTime) (*MsgUpdateStartTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStartTime not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateMinters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMinters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMinters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeminter.Msg/UpdateMinters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMinters(ctx, req.(*MsgUpdateMinters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMintDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMintDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMintDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeminter.Msg/UpdateMintDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMintDenom(ctx, req.(*MsgUpdateMintDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStartTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStartTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStartTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeminter.Msg/UpdateStartTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStartTime(ctx, req.(*MsgUpdateStartTime))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfeminter.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMinters",
			Handler:    _Msg_UpdateMinters_Handler,
		},
		{
			MethodName: "UpdateMintDenom",
			Handler:    _Msg_UpdateMintDenom_Handler,
		},
		{
			MethodName: "UpdateStartTime",
			Handler:    _Msg_UpdateStartTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c4echain/cfeminter/tx.proto",
}

func (m *MsgUpdateMinters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMinters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMinters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Minters) > 0 {
		for iNdEx := len(m.Minters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Minters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMintersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMintersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMintersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMintDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMintDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMintDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMintDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMintDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMintDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStartTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStartTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStartTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStartTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStartTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStartTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateMinters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Minters) > 0 {
		for _, e := range m.Minters {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateMintersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMintDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMintDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateStartTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateStartTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateMinters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMinters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMinters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minters = append(m.Minters, &Minter{})
			if err := m.Minters[len(m.Minters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMintersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMintersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMintersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMintDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMintDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMintDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMintDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMintDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMintDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStartTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStartTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStartTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStartTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStartTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStartTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
