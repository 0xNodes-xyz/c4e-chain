// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfevesting/account_vesting.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AccountVestingsList struct {
	Vestings []*AccountVestings `protobuf:"bytes,1,rep,name=vestings,proto3" json:"vestings,omitempty"`
}

func (m *AccountVestingsList) Reset()         { *m = AccountVestingsList{} }
func (m *AccountVestingsList) String() string { return proto.CompactTextString(m) }
func (*AccountVestingsList) ProtoMessage()    {}
func (*AccountVestingsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_587a03f29f224c3f, []int{0}
}
func (m *AccountVestingsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountVestingsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountVestingsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountVestingsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountVestingsList.Merge(m, src)
}
func (m *AccountVestingsList) XXX_Size() int {
	return m.Size()
}
func (m *AccountVestingsList) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountVestingsList.DiscardUnknown(m)
}

var xxx_messageInfo_AccountVestingsList proto.InternalMessageInfo

func (m *AccountVestingsList) GetVestings() []*AccountVestings {
	if m != nil {
		return m.Vestings
	}
	return nil
}

type AccountVestings struct {
	Address          string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	DelegableAddress string     `protobuf:"bytes,2,opt,name=delegable_address,json=delegableAddress,proto3" json:"delegable_address,omitempty"`
	Vestings         []*Vesting `protobuf:"bytes,3,rep,name=vestings,proto3" json:"vestings,omitempty"`
}

func (m *AccountVestings) Reset()         { *m = AccountVestings{} }
func (m *AccountVestings) String() string { return proto.CompactTextString(m) }
func (*AccountVestings) ProtoMessage()    {}
func (*AccountVestings) Descriptor() ([]byte, []int) {
	return fileDescriptor_587a03f29f224c3f, []int{1}
}
func (m *AccountVestings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountVestings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountVestings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountVestings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountVestings.Merge(m, src)
}
func (m *AccountVestings) XXX_Size() int {
	return m.Size()
}
func (m *AccountVestings) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountVestings.DiscardUnknown(m)
}

var xxx_messageInfo_AccountVestings proto.InternalMessageInfo

func (m *AccountVestings) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountVestings) GetDelegableAddress() string {
	if m != nil {
		return m.DelegableAddress
	}
	return ""
}

func (m *AccountVestings) GetVestings() []*Vesting {
	if m != nil {
		return m.Vestings
	}
	return nil
}

type Vesting struct {
	Id                        int32                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VestingType               string                                 `protobuf:"bytes,2,opt,name=vesting_type,json=vestingType,proto3" json:"vesting_type,omitempty"`
	VestingStart              int64                                  `protobuf:"varint,3,opt,name=vesting_start,json=vestingStart,proto3" json:"vesting_start,omitempty"`
	LockEnd                   int64                                  `protobuf:"varint,4,opt,name=lock_end,json=lockEnd,proto3" json:"lock_end,omitempty"`
	VestingEnd                int64                                  `protobuf:"varint,5,opt,name=vesting_end,json=vestingEnd,proto3" json:"vesting_end,omitempty"`
	Vested                    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=vested,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"vested"`
	ReleasePeriod             int64                                  `protobuf:"varint,7,opt,name=release_period,json=releasePeriod,proto3" json:"release_period,omitempty"`
	DelegationAllowed         bool                                   `protobuf:"varint,8,opt,name=delegation_allowed,json=delegationAllowed,proto3" json:"delegation_allowed,omitempty"`
	Withdrawn                 github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=withdrawn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"withdrawn"`
	Sent                      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=sent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sent"`
	LastModification          int64                                  `protobuf:"varint,11,opt,name=last_modification,json=lastModification,proto3" json:"last_modification,omitempty"`
	LastModificationVested    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,12,opt,name=last_modification_vested,json=lastModificationVested,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"last_modification_vested"`
	LastModificationWithdrawn github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=last_modification_withdrawn,json=lastModificationWithdrawn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"last_modification_withdrawn"`
}

func (m *Vesting) Reset()         { *m = Vesting{} }
func (m *Vesting) String() string { return proto.CompactTextString(m) }
func (*Vesting) ProtoMessage()    {}
func (*Vesting) Descriptor() ([]byte, []int) {
	return fileDescriptor_587a03f29f224c3f, []int{2}
}
func (m *Vesting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vesting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vesting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vesting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vesting.Merge(m, src)
}
func (m *Vesting) XXX_Size() int {
	return m.Size()
}
func (m *Vesting) XXX_DiscardUnknown() {
	xxx_messageInfo_Vesting.DiscardUnknown(m)
}

var xxx_messageInfo_Vesting proto.InternalMessageInfo

func (m *Vesting) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Vesting) GetVestingType() string {
	if m != nil {
		return m.VestingType
	}
	return ""
}

func (m *Vesting) GetVestingStart() int64 {
	if m != nil {
		return m.VestingStart
	}
	return 0
}

func (m *Vesting) GetLockEnd() int64 {
	if m != nil {
		return m.LockEnd
	}
	return 0
}

func (m *Vesting) GetVestingEnd() int64 {
	if m != nil {
		return m.VestingEnd
	}
	return 0
}

func (m *Vesting) GetReleasePeriod() int64 {
	if m != nil {
		return m.ReleasePeriod
	}
	return 0
}

func (m *Vesting) GetDelegationAllowed() bool {
	if m != nil {
		return m.DelegationAllowed
	}
	return false
}

func (m *Vesting) GetLastModification() int64 {
	if m != nil {
		return m.LastModification
	}
	return 0
}

func init() {
	proto.RegisterType((*AccountVestingsList)(nil), "chain4energy.c4echain.cfevesting.AccountVestingsList")
	proto.RegisterType((*AccountVestings)(nil), "chain4energy.c4echain.cfevesting.AccountVestings")
	proto.RegisterType((*Vesting)(nil), "chain4energy.c4echain.cfevesting.Vesting")
}

func init() { proto.RegisterFile("cfevesting/account_vesting.proto", fileDescriptor_587a03f29f224c3f) }

var fileDescriptor_587a03f29f224c3f = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6a, 0x13, 0x41,
	0x18, 0xcd, 0x26, 0xcd, 0xdf, 0x97, 0xa6, 0xb6, 0xa3, 0xc8, 0x54, 0x61, 0x13, 0x2b, 0x4a, 0x44,
	0xb2, 0x8b, 0x9a, 0x17, 0x48, 0xa0, 0x82, 0xd0, 0x8a, 0xac, 0x52, 0xc1, 0x9b, 0x65, 0xb3, 0x33,
	0xdd, 0x0c, 0xdd, 0xcc, 0x84, 0x9d, 0xa9, 0x31, 0x6f, 0xe1, 0x1b, 0xf8, 0x3a, 0xbd, 0xec, 0x85,
	0x17, 0xe2, 0x45, 0x91, 0xe4, 0x45, 0x64, 0x67, 0x67, 0x9b, 0x25, 0xbd, 0x28, 0xe4, 0x2a, 0xf9,
	0xce, 0x39, 0xdf, 0x39, 0x27, 0x1f, 0xd9, 0x85, 0x6e, 0x78, 0x4e, 0xbf, 0x53, 0xa9, 0x18, 0x8f,
	0xdc, 0x20, 0x0c, 0xc5, 0x25, 0x57, 0xbe, 0x99, 0x9d, 0x59, 0x22, 0x94, 0x40, 0xdd, 0x70, 0x12,
	0x30, 0x3e, 0xa0, 0x9c, 0x26, 0xd1, 0xc2, 0x09, 0x07, 0x54, 0xcf, 0xce, 0x7a, 0xef, 0xc9, 0xa3,
	0x48, 0x44, 0x42, 0x8b, 0xdd, 0xf4, 0x5b, 0xb6, 0x77, 0x44, 0xe0, 0xe1, 0x30, 0x33, 0x3c, 0xcb,
	0x74, 0xf2, 0x84, 0x49, 0x85, 0x4e, 0xa1, 0x61, 0xf6, 0x24, 0xb6, 0xba, 0x95, 0x5e, 0xeb, 0xed,
	0x1b, 0xe7, 0xbe, 0x04, 0x67, 0xc3, 0xc8, 0xbb, 0xb5, 0x38, 0xfa, 0x65, 0xc1, 0x83, 0x0d, 0x16,
	0x61, 0xa8, 0x07, 0x84, 0x24, 0x54, 0xa6, 0x09, 0x56, 0xaf, 0xe9, 0xe5, 0x23, 0x7a, 0x0d, 0x07,
	0x84, 0xc6, 0x34, 0x0a, 0xc6, 0x31, 0xf5, 0x73, 0x4d, 0x59, 0x6b, 0xf6, 0x6f, 0x89, 0xa1, 0x11,
	0x1f, 0x17, 0x9a, 0x56, 0x74, 0xd3, 0x57, 0xf7, 0x37, 0x35, 0x25, 0x0a, 0x0d, 0x7f, 0x57, 0xa1,
	0x6e, 0x50, 0xb4, 0x07, 0x65, 0x46, 0x74, 0xa9, 0xaa, 0x57, 0x66, 0x04, 0x3d, 0x83, 0x5d, 0xa3,
	0xf3, 0xd5, 0x62, 0x46, 0x4d, 0x95, 0x96, 0xc1, 0xbe, 0x2c, 0x66, 0x14, 0x3d, 0x87, 0x76, 0x2e,
	0x91, 0x2a, 0x48, 0x14, 0xae, 0x74, 0xad, 0x5e, 0xc5, 0xcb, 0xf7, 0x3e, 0xa7, 0x18, 0x3a, 0x84,
	0x46, 0x2c, 0xc2, 0x0b, 0x9f, 0x72, 0x82, 0x77, 0x34, 0x5f, 0x4f, 0xe7, 0x63, 0x4e, 0x50, 0x07,
	0x72, 0x3b, 0xcd, 0x56, 0x35, 0x0b, 0x06, 0x4a, 0x05, 0xef, 0xa1, 0x96, 0x4e, 0x94, 0xe0, 0x5a,
	0x9a, 0x3e, 0x72, 0xae, 0x6e, 0x3a, 0xa5, 0xbf, 0x37, 0x9d, 0x97, 0x11, 0x53, 0x93, 0xcb, 0xb1,
	0x13, 0x8a, 0xa9, 0x1b, 0x0a, 0x39, 0x15, 0xd2, 0x7c, 0xf4, 0x25, 0xb9, 0x70, 0xd3, 0xba, 0xd2,
	0xf9, 0xc0, 0x95, 0x67, 0xb6, 0xd1, 0x0b, 0xd8, 0x4b, 0x68, 0x4c, 0x03, 0x49, 0xfd, 0x19, 0x4d,
	0x98, 0x20, 0xb8, 0xae, 0xb3, 0xda, 0x06, 0xfd, 0xa4, 0x41, 0xd4, 0x07, 0x94, 0x5d, 0x5a, 0x31,
	0xc1, 0xfd, 0x20, 0x8e, 0xc5, 0x9c, 0x12, 0xdc, 0xe8, 0x5a, 0xbd, 0x86, 0x77, 0xb0, 0x66, 0x86,
	0x19, 0x81, 0x4e, 0xa0, 0x39, 0x67, 0x6a, 0x42, 0x92, 0x60, 0xce, 0x71, 0x73, 0xab, 0x82, 0x6b,
	0x03, 0x34, 0x82, 0x1d, 0x49, 0xb9, 0xc2, 0xb0, 0x95, 0x91, 0xde, 0x4d, 0xff, 0x43, 0x71, 0x20,
	0x95, 0x3f, 0x15, 0x84, 0x9d, 0xb3, 0x50, 0xb7, 0xc5, 0x2d, 0xfd, 0x53, 0xf7, 0x53, 0xe2, 0xb4,
	0x80, 0xa3, 0x09, 0xe0, 0x3b, 0x62, 0xdf, 0x9c, 0x7b, 0x77, 0xab, 0x12, 0x8f, 0x37, 0x33, 0xce,
	0xb2, 0xf3, 0x73, 0x78, 0x7a, 0x37, 0x69, 0x7d, 0xba, 0xf6, 0x56, 0x61, 0x87, 0x9b, 0x61, 0x5f,
	0x73, 0xc3, 0xd1, 0xc7, 0xab, 0xa5, 0x6d, 0x5d, 0x2f, 0x6d, 0xeb, 0xdf, 0xd2, 0xb6, 0x7e, 0xae,
	0xec, 0xd2, 0xf5, 0xca, 0x2e, 0xfd, 0x59, 0xd9, 0xa5, 0x6f, 0x83, 0xa2, 0x79, 0xe1, 0x79, 0x71,
	0xc3, 0x01, 0xed, 0x6b, 0xc0, 0xfd, 0xe1, 0x16, 0x5e, 0x3b, 0x3a, 0x6e, 0x5c, 0xd3, 0x6f, 0x8d,
	0x77, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xba, 0x89, 0x02, 0x6f, 0x91, 0x04, 0x00, 0x00,
}

func (m *AccountVestingsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountVestingsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountVestingsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vestings) > 0 {
		for iNdEx := len(m.Vestings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vestings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccountVesting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountVestings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountVestings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountVestings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vestings) > 0 {
		for iNdEx := len(m.Vestings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vestings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccountVesting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DelegableAddress) > 0 {
		i -= len(m.DelegableAddress)
		copy(dAtA[i:], m.DelegableAddress)
		i = encodeVarintAccountVesting(dAtA, i, uint64(len(m.DelegableAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccountVesting(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vesting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LastModificationWithdrawn.Size()
		i -= size
		if _, err := m.LastModificationWithdrawn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAccountVesting(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.LastModificationVested.Size()
		i -= size
		if _, err := m.LastModificationVested.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAccountVesting(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.LastModification != 0 {
		i = encodeVarintAccountVesting(dAtA, i, uint64(m.LastModification))
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.Sent.Size()
		i -= size
		if _, err := m.Sent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAccountVesting(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.Withdrawn.Size()
		i -= size
		if _, err := m.Withdrawn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAccountVesting(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.DelegationAllowed {
		i--
		if m.DelegationAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ReleasePeriod != 0 {
		i = encodeVarintAccountVesting(dAtA, i, uint64(m.ReleasePeriod))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.Vested.Size()
		i -= size
		if _, err := m.Vested.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAccountVesting(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.VestingEnd != 0 {
		i = encodeVarintAccountVesting(dAtA, i, uint64(m.VestingEnd))
		i--
		dAtA[i] = 0x28
	}
	if m.LockEnd != 0 {
		i = encodeVarintAccountVesting(dAtA, i, uint64(m.LockEnd))
		i--
		dAtA[i] = 0x20
	}
	if m.VestingStart != 0 {
		i = encodeVarintAccountVesting(dAtA, i, uint64(m.VestingStart))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VestingType) > 0 {
		i -= len(m.VestingType)
		copy(dAtA[i:], m.VestingType)
		i = encodeVarintAccountVesting(dAtA, i, uint64(len(m.VestingType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAccountVesting(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccountVesting(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccountVesting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountVestingsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vestings) > 0 {
		for _, e := range m.Vestings {
			l = e.Size()
			n += 1 + l + sovAccountVesting(uint64(l))
		}
	}
	return n
}

func (m *AccountVestings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccountVesting(uint64(l))
	}
	l = len(m.DelegableAddress)
	if l > 0 {
		n += 1 + l + sovAccountVesting(uint64(l))
	}
	if len(m.Vestings) > 0 {
		for _, e := range m.Vestings {
			l = e.Size()
			n += 1 + l + sovAccountVesting(uint64(l))
		}
	}
	return n
}

func (m *Vesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAccountVesting(uint64(m.Id))
	}
	l = len(m.VestingType)
	if l > 0 {
		n += 1 + l + sovAccountVesting(uint64(l))
	}
	if m.VestingStart != 0 {
		n += 1 + sovAccountVesting(uint64(m.VestingStart))
	}
	if m.LockEnd != 0 {
		n += 1 + sovAccountVesting(uint64(m.LockEnd))
	}
	if m.VestingEnd != 0 {
		n += 1 + sovAccountVesting(uint64(m.VestingEnd))
	}
	l = m.Vested.Size()
	n += 1 + l + sovAccountVesting(uint64(l))
	if m.ReleasePeriod != 0 {
		n += 1 + sovAccountVesting(uint64(m.ReleasePeriod))
	}
	if m.DelegationAllowed {
		n += 2
	}
	l = m.Withdrawn.Size()
	n += 1 + l + sovAccountVesting(uint64(l))
	l = m.Sent.Size()
	n += 1 + l + sovAccountVesting(uint64(l))
	if m.LastModification != 0 {
		n += 1 + sovAccountVesting(uint64(m.LastModification))
	}
	l = m.LastModificationVested.Size()
	n += 1 + l + sovAccountVesting(uint64(l))
	l = m.LastModificationWithdrawn.Size()
	n += 1 + l + sovAccountVesting(uint64(l))
	return n
}

func sovAccountVesting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccountVesting(x uint64) (n int) {
	return sovAccountVesting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountVestingsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountVesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountVestingsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountVestingsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vestings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vestings = append(m.Vestings, &AccountVestings{})
			if err := m.Vestings[len(m.Vestings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountVesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountVestings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountVesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountVestings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountVestings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegableAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegableAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vestings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vestings = append(m.Vestings, &Vesting{})
			if err := m.Vestings[len(m.Vestings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountVesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vesting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountVesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vesting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vesting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingStart", wireType)
			}
			m.VestingStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockEnd", wireType)
			}
			m.LockEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingEnd", wireType)
			}
			m.VestingEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vested.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasePeriod", wireType)
			}
			m.ReleasePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleasePeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelegationAllowed = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Withdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModification", wireType)
			}
			m.LastModification = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastModification |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModificationVested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastModificationVested.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModificationWithdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastModificationWithdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountVesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountVesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccountVesting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccountVesting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccountVesting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccountVesting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccountVesting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccountVesting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccountVesting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccountVesting = fmt.Errorf("proto: unexpected end of group")
)
