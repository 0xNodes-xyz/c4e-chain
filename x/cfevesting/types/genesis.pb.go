// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfevesting/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the cfevesting module's genesis state.
type GenesisState struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// this line is used by starport scaffolding # genesis/proto/state
	VestingTypes        []GenesisVestingType `protobuf:"bytes,2,rep,name=vesting_types,json=vestingTypes,proto3" json:"vesting_types" yaml:"vesting_types"`
	AccountVestingsList AccountVestingsList  `protobuf:"bytes,3,opt,name=account_vestings_list,json=accountVestingsList,proto3" json:"account_vestings_list" yaml:"account_vestings_list"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4bc386047a9a81, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetVestingTypes() []GenesisVestingType {
	if m != nil {
		return m.VestingTypes
	}
	return nil
}

func (m *GenesisState) GetAccountVestingsList() AccountVestingsList {
	if m != nil {
		return m.AccountVestingsList
	}
	return AccountVestingsList{}
}

type GenesisVestingType struct {
	// vesting type name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// period of locked coins from vesting start
	LockupPeriod     int64  `protobuf:"varint,2,opt,name=lockup_period,json=lockupPeriod,proto3" json:"lockup_period,omitempty"`
	LockupPeriodUnit string `protobuf:"bytes,3,opt,name=lockup_period_unit,json=lockupPeriodUnit,proto3" json:"lockup_period_unit,omitempty"`
	// period of veesting coins from lockup period end
	VestingPeriod     int64  `protobuf:"varint,4,opt,name=vesting_period,json=vestingPeriod,proto3" json:"vesting_period,omitempty"`
	VestingPeriodUnit string `protobuf:"bytes,5,opt,name=vesting_period_unit,json=vestingPeriodUnit,proto3" json:"vesting_period_unit,omitempty"`
	// vested coin periodical releasing
	TokenReleasingPeriod     int64  `protobuf:"varint,6,opt,name=token_releasing_period,json=tokenReleasingPeriod,proto3" json:"token_releasing_period,omitempty"`
	TokenReleasingPeriodUnit string `protobuf:"bytes,7,opt,name=token_releasing_period_unit,json=tokenReleasingPeriodUnit,proto3" json:"token_releasing_period_unit,omitempty"`
	// defines if vesting type allows delegation
	DelegationsAllowed bool `protobuf:"varint,8,opt,name=delegations_allowed,json=delegationsAllowed,proto3" json:"delegations_allowed,omitempty"`
}

func (m *GenesisVestingType) Reset()         { *m = GenesisVestingType{} }
func (m *GenesisVestingType) String() string { return proto.CompactTextString(m) }
func (*GenesisVestingType) ProtoMessage()    {}
func (*GenesisVestingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4bc386047a9a81, []int{1}
}
func (m *GenesisVestingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisVestingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisVestingType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisVestingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisVestingType.Merge(m, src)
}
func (m *GenesisVestingType) XXX_Size() int {
	return m.Size()
}
func (m *GenesisVestingType) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisVestingType.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisVestingType proto.InternalMessageInfo

func (m *GenesisVestingType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenesisVestingType) GetLockupPeriod() int64 {
	if m != nil {
		return m.LockupPeriod
	}
	return 0
}

func (m *GenesisVestingType) GetLockupPeriodUnit() string {
	if m != nil {
		return m.LockupPeriodUnit
	}
	return ""
}

func (m *GenesisVestingType) GetVestingPeriod() int64 {
	if m != nil {
		return m.VestingPeriod
	}
	return 0
}

func (m *GenesisVestingType) GetVestingPeriodUnit() string {
	if m != nil {
		return m.VestingPeriodUnit
	}
	return ""
}

func (m *GenesisVestingType) GetTokenReleasingPeriod() int64 {
	if m != nil {
		return m.TokenReleasingPeriod
	}
	return 0
}

func (m *GenesisVestingType) GetTokenReleasingPeriodUnit() string {
	if m != nil {
		return m.TokenReleasingPeriodUnit
	}
	return ""
}

func (m *GenesisVestingType) GetDelegationsAllowed() bool {
	if m != nil {
		return m.DelegationsAllowed
	}
	return false
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "chain4energy.c4echain.cfevesting.GenesisState")
	proto.RegisterType((*GenesisVestingType)(nil), "chain4energy.c4echain.cfevesting.GenesisVestingType")
}

func init() { proto.RegisterFile("cfevesting/genesis.proto", fileDescriptor_ff4bc386047a9a81) }

var fileDescriptor_ff4bc386047a9a81 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0xb6, 0x94, 0xcd, 0xeb, 0x10, 0xb8, 0x05, 0xa2, 0x32, 0x65, 0x51, 0x00, 0x29,
	0x07, 0x48, 0xa4, 0x11, 0x2e, 0x48, 0x1c, 0xd6, 0x03, 0x5c, 0x10, 0x9a, 0xc2, 0x9f, 0x03, 0x97,
	0xc8, 0x73, 0x5f, 0x32, 0x6b, 0xa9, 0x1d, 0xc5, 0xee, 0x46, 0x3f, 0x05, 0x7c, 0xac, 0x1d, 0x77,
	0xe4, 0x34, 0x41, 0xfb, 0x0d, 0x38, 0x71, 0x44, 0xb3, 0x5d, 0x2d, 0xa5, 0x95, 0x7a, 0x8b, 0xfd,
	0x3e, 0xcf, 0xef, 0x7d, 0x5e, 0xc7, 0x46, 0x2e, 0xfd, 0x0a, 0x67, 0x20, 0x15, 0xe3, 0x79, 0x9c,
	0x03, 0x07, 0xc9, 0x64, 0x54, 0x56, 0x42, 0x09, 0xec, 0xd3, 0x13, 0xc2, 0x78, 0x02, 0x1c, 0xaa,
	0x7c, 0x1a, 0xd1, 0x04, 0xf4, 0x3a, 0xba, 0xd1, 0x0f, 0xfa, 0xb9, 0xc8, 0x85, 0x16, 0xc7, 0xd7,
	0x5f, 0xc6, 0x37, 0x78, 0x58, 0x23, 0x96, 0xa4, 0x22, 0x63, 0x0b, 0x1c, 0xf8, 0xb5, 0x02, 0xa1,
	0x54, 0x4c, 0xb8, 0xca, 0xec, 0xda, 0x28, 0x82, 0xdf, 0x4d, 0xd4, 0x7d, 0x6b, 0x42, 0x7c, 0x50,
	0x44, 0x01, 0x7e, 0x83, 0x3a, 0x06, 0xe1, 0x3a, 0xbe, 0x13, 0xee, 0x1c, 0x84, 0xd1, 0xa6, 0x50,
	0xd1, 0x91, 0xd6, 0x0f, 0xdb, 0x17, 0x57, 0xfb, 0x8d, 0xd4, 0xba, 0xf1, 0x39, 0xda, 0xb5, 0xf5,
	0x4c, 0x4d, 0x4b, 0x90, 0x6e, 0xd3, 0x6f, 0x85, 0x3b, 0x07, 0xc9, 0x66, 0x9c, 0x8d, 0xf3, 0xd9,
	0x2c, 0x3f, 0x4e, 0x4b, 0x18, 0xee, 0x5d, 0xa3, 0xff, 0x5c, 0xed, 0xf7, 0xa7, 0x64, 0x5c, 0xbc,
	0x0a, 0x96, 0xc0, 0x41, 0xda, 0x3d, 0xbb, 0x91, 0x4a, 0xfc, 0xdd, 0x41, 0xf7, 0xff, 0x9b, 0x55,
	0x66, 0x05, 0x93, 0xca, 0x6d, 0xe9, 0x81, 0x5e, 0x6e, 0x4e, 0x70, 0x68, 0xec, 0x36, 0x81, 0x7c,
	0xc7, 0xa4, 0x1a, 0x3e, 0xb1, 0x11, 0xf6, 0x4c, 0x84, 0xb5, 0x1d, 0x82, 0xb4, 0x47, 0x56, 0xad,
	0xc1, 0xdf, 0x26, 0xc2, 0xab, 0x43, 0x61, 0x8c, 0xda, 0x9c, 0x8c, 0x41, 0x9f, 0xf3, 0x76, 0xaa,
	0xbf, 0xf1, 0x63, 0xb4, 0x5b, 0x08, 0x7a, 0x3a, 0x29, 0xb3, 0x12, 0x2a, 0x26, 0x46, 0x6e, 0xd3,
	0x77, 0xc2, 0x56, 0xda, 0x35, 0x9b, 0x47, 0x7a, 0x0f, 0x3f, 0x43, 0x78, 0x49, 0x94, 0x4d, 0x38,
	0x33, 0xd3, 0x6d, 0xa7, 0x77, 0xeb, 0xca, 0x4f, 0x9c, 0x29, 0xfc, 0x14, 0xdd, 0x59, 0x9c, 0x97,
	0x65, 0xb6, 0x35, 0x73, 0xf1, 0x7b, 0x2c, 0x34, 0x42, 0xbd, 0x65, 0x99, 0xa1, 0xde, 0xd2, 0xd4,
	0x7b, 0x4b, 0x5a, 0x8d, 0x4d, 0xd0, 0x03, 0x25, 0x4e, 0x81, 0x67, 0x15, 0x14, 0x40, 0x64, 0x0d,
	0xdf, 0xd1, 0xf8, 0xbe, 0xae, 0xa6, 0x8b, 0xa2, 0xed, 0xf2, 0x1a, 0x3d, 0x5a, 0xef, 0x32, 0xdd,
	0x6e, 0xeb, 0x6e, 0xee, 0x3a, 0xab, 0x6e, 0x1a, 0xa3, 0xde, 0x08, 0x0a, 0xc8, 0x89, 0x62, 0x82,
	0xcb, 0x8c, 0x14, 0x85, 0x38, 0x87, 0x91, 0xbb, 0xe5, 0x3b, 0xe1, 0x56, 0x8a, 0x6b, 0xa5, 0x43,
	0x53, 0x19, 0xbe, 0xbf, 0x98, 0x79, 0xce, 0xe5, 0xcc, 0x73, 0x7e, 0xcd, 0x3c, 0xe7, 0xc7, 0xdc,
	0x6b, 0x5c, 0xce, 0xbd, 0xc6, 0xcf, 0xb9, 0xd7, 0xf8, 0x92, 0xe4, 0x4c, 0x9d, 0x4c, 0x8e, 0x23,
	0x2a, 0xc6, 0x71, 0xfd, 0x42, 0xc4, 0x34, 0x81, 0xe7, 0x7a, 0x23, 0xfe, 0x16, 0xd7, 0x9e, 0x8f,
	0xbe, 0x6b, 0xc7, 0x1d, 0xfd, 0x6a, 0x5e, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x65, 0x4c, 0xf7,
	0x05, 0xc4, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccountVestingsList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VestingTypes) > 0 {
		for iNdEx := len(m.VestingTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisVestingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisVestingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisVestingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelegationsAllowed {
		i--
		if m.DelegationsAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.TokenReleasingPeriodUnit) > 0 {
		i -= len(m.TokenReleasingPeriodUnit)
		copy(dAtA[i:], m.TokenReleasingPeriodUnit)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.TokenReleasingPeriodUnit)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TokenReleasingPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TokenReleasingPeriod))
		i--
		dAtA[i] = 0x30
	}
	if len(m.VestingPeriodUnit) > 0 {
		i -= len(m.VestingPeriodUnit)
		copy(dAtA[i:], m.VestingPeriodUnit)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.VestingPeriodUnit)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VestingPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.VestingPeriod))
		i--
		dAtA[i] = 0x20
	}
	if len(m.LockupPeriodUnit) > 0 {
		i -= len(m.LockupPeriodUnit)
		copy(dAtA[i:], m.LockupPeriodUnit)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.LockupPeriodUnit)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LockupPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LockupPeriod))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.VestingTypes) > 0 {
		for _, e := range m.VestingTypes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.AccountVestingsList.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisVestingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.LockupPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.LockupPeriod))
	}
	l = len(m.LockupPeriodUnit)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.VestingPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.VestingPeriod))
	}
	l = len(m.VestingPeriodUnit)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.TokenReleasingPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.TokenReleasingPeriod))
	}
	l = len(m.TokenReleasingPeriodUnit)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.DelegationsAllowed {
		n += 2
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingTypes = append(m.VestingTypes, GenesisVestingType{})
			if err := m.VestingTypes[len(m.VestingTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountVestingsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccountVestingsList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisVestingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisVestingType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisVestingType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			m.LockupPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockupPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriodUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockupPeriodUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriod", wireType)
			}
			m.VestingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriodUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingPeriodUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenReleasingPeriod", wireType)
			}
			m.TokenReleasingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenReleasingPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenReleasingPeriodUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenReleasingPeriodUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationsAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelegationsAllowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
